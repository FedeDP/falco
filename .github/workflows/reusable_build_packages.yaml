# This is a reusable workflow used by master and release CI
on:
  workflow_call:
    inputs:
      arch:
        description: x86_64 or aarch64
        required: true
        type: string
    outputs:
      version:
        description: 'Falco version extracted from config_falco.h'
        value: ${{ jobs.build-packages.outputs.version }}    

jobs:
  build-packages:
    # See https://github.com/actions/runner/issues/409#issuecomment-1158849936
    runs-on: ${{ (inputs.arch == "aarch64") && fromJSON('[ "self-hosted", "linux", "ARM64" ]') || 'ubuntu-latest' }}
    container:
      image: ubuntu:22.04
    # Map the job outputs to step outputs
    outputs:
      version: ${{ steps.store_version.outputs.version }}  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install build dependencies
        run: |
          mkdir deps && cd deps
          apt update -y
          DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends ca-certificates cmake build-essential clang-14 git pkg-config autoconf automake libelf-dev
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 90
          update-alternatives --install /usr/bin/llvm-strip llvm-strip /usr/bin/llvm-strip-14 90
          git clone https://github.com/libbpf/bpftool.git --branch v7.0.0 --single-branch
          cd bpftool
          git submodule update --init
          cd src && make install

      - name: Build modern BPF skeleton
        run: |
          cd source
          mkdir skeleton-build && cd skeleton-build
          cmake -DUSE_BUNDLED_DEPS=ON -DBUILD_FALCO_MODERN_BPF=ON -DCREATE_TEST_TARGETS=Off ..
          make ProbeSkeleton

      - name: Build Falco packages
        run: |
          mkdir -p source/build
          DOCKER_BUILDKIT=1 docker build \
            -f ${{ github.workspace }}/source/docker/builder/modern-falco-builder.Dockerfile \
            --output type=local,dest=${{ github.workspace }}/source/build \
            --build-arg CMAKE_OPTIONS="\
              -DCMAKE_BUILD_TYPE=Release \
              -DUSE_BUNDLED_DEPS=On \
              -DFALCO_ETC_DIR=/etc/falco \
              -DBUILD_FALCO_MODERN_BPF=ON \
              -DMODERN_BPF_SKEL_DIR=/source/skeleton-build/skel_dir \
              -DBUILD_DRIVER=Off \
              -DBUILD_BPF=Off" \
            --build-arg DEST_BUILD_DIR=${{ github.workspace }}/source/build \
            ${{ github.workspace }}/source
            
      - name: Load and store Falco version output
        id: store_version
        run: |
          FALCO_VERSION=$(cat ${{ github.workspace }}/source/build/userspace/falco/config_falco.h | grep 'FALCO_VERSION ' | cut -d' ' -f3 | sed -e 's/^"//' -e 's/"$//')
          echo "version=${FALCO_VERSION}" >> $GITHUB_OUTPUT     

      - name: Upload Falco tar.gz package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ steps.store_version.outputs.version }}-${{ inputs.arch }}.tar.gz
          path: |
            ${{ github.workspace }}/source/build/packages/falco-*.tar.gz
            
      - name: Upload Falco deb package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ steps.store_version.outputs.version }}-${{ inputs.arch }}.deb
          path: |
            ${{ github.workspace }}/source/build/packages/falco-*.deb
      
      - name: Upload Falco rpm package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ steps.store_version.outputs.version }}-${{ inputs.arch }}.rpm
          path: |
            ${{ github.workspace }}/source/build/packages/falco-*.rpm
            
  build-musl-package:
    needs: build-packages
    # x86_64 only for now
    if: ${{ inputs.arch == 'x86_64' }}
    runs-on: ubuntu-latest
    container:
      image: alpine:3.17
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install build dependencies
        run: |
          apk add g++ gcc cmake make git bash perl linux-headers autoconf automake m4 libtool elfutils-dev libelf-static patch binutils bpftool clang
          
      - name: Prepare project
        run: |
          mkdir build && cd build
          cmake -DCPACK_GENERATOR=TGZ -DBUILD_BPF=Off -DBUILD_DRIVER=Off -DCMAKE_BUILD_TYPE=Release -DUSE_BUNDLED_DEPS=On -DUSE_BUNDLED_LIBELF=Off -DBUILD_LIBSCAP_MODERN_BPF=ON -DMUSL_OPTIMIZED_BUILD=On -DFALCO_ETC_DIR=/etc/falco /source-static/falco
          
      - name: Build project
        run: |
          cd build
          make -j6 all
      
      - name: Build packages
        run: |
          cd build
          make -j6 package
          
      - name: Upload Falco static package
        uses: actions/upload-artifact@v3
        with:
          name: falco-${{ needs.build-packages.outputs.version }}-static-x86_64.tar.gz
          path: |
            ${{ github.workspace }}/build/falco-*.tar.gz
